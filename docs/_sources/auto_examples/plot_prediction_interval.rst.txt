
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_prediction_interval.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_prediction_interval.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_prediction_interval.py:


Example prediction interval plot

.. GENERATED FROM PYTHON SOURCE LINES 4-28


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/kpierce/epivislab/localdocs/source/examples/plot_prediction_interval.py", line 27, in <module>
        plotly.io.show(fig)
      File "/Users/kpierce/epivislab/evl-venv/lib/python3.9/site-packages/plotly/io/_renderers.py", line 386, in show
        fig_dict = validate_coerce_fig_to_dict(fig, validate)
      File "/Users/kpierce/epivislab/evl-venv/lib/python3.9/site-packages/plotly/io/_utils.py", line 22, in validate_coerce_fig_to_dict
        raise ValueError(
    ValueError: 
    The fig parameter must be a dict or Figure.
        Received value of type <class 'ipywidgets.widgets.widget_box.VBox'>: VBox(children=(HBox(children=(Dropdown(description='age', options=('0-4', '18-49', '5-17', '50-64', '65+'), value='0-4'), Dropdown(description='risk', options=('high', 'low'), value='high'), Dropdown(description='vertex', options=('Austin',), value='Austin'), Dropdown(description='compt', options=('D', 'E', 'Ia', 'Ih', 'Iy', 'Pa', 'Py', 'R', 'S'), value='D'))), FigureWidget({
        'data': [{'line': {'color': 'rgba(255,255,255,0.2)'},
                  'mode': 'lines',
                  'showlegend': False,
                  'type': 'scatter',
                  'uid': 'a2f5b151-05d2-4f6e-a3d3-adf579193684',
                  'x': array([datetime.datetime(2020, 3, 11, 0, 0),
                              datetime.datetime(2020, 3, 12, 0, 0),
                              datetime.datetime(2020, 3, 13, 0, 0),
                              datetime.datetime(2020, 3, 14, 0, 0),
                              datetime.datetime(2020, 3, 15, 0, 0),
                              datetime.datetime(2020, 3, 16, 0, 0),
                              datetime.datetime(2020, 3, 17, 0, 0),
                              datetime.datetime(2020, 3, 18, 0, 0),
                              datetime.datetime(2020, 3, 19, 0, 0),
                              datetime.datetime(2020, 3, 20, 0, 0),
                              datetime.datetime(2020, 3, 21, 0, 0),
                              datetime.datetime(2020, 3, 22, 0, 0),
                              datetime.datetime(2020, 3, 23, 0, 0),
                              datetime.datetime(2020, 3, 24, 0, 0),
                              datetime.datetime(2020, 3, 25, 0, 0),
                              datetime.datetime(2020, 3, 26, 0, 0),
                              datetime.datetime(2020, 3, 27, 0, 0),
                              datetime.datetime(2020, 3, 28, 0, 0),
                              datetime.datetime(2020, 3, 29, 0, 0),
                              datetime.datetime(2020, 3, 30, 0, 0),
                              datetime.datetime(2020, 3, 31, 0, 0),
                              datetime.datetime(2020, 4, 1, 0, 0)], dtype=object),
                  'y': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                              0., 0., 0., 0.])},
                 {'fill': 'tonexty',
                  'fillcolor': 'rgba(189,0,38,0.2)',
                  'line': {'color': 'rgba(255,255,255,0)'},
                  'mode': 'lines',
                  'showlegend': False,
                  'type': 'scatter',
                  'uid': '75be6467-9a43-41e3-8e06-a532556c3a85',
                  'x': array([datetime.datetime(2020, 3, 11, 0, 0),
                              datetime.datetime(2020, 3, 12, 0, 0),
                              datetime.datetime(2020, 3, 13, 0, 0),
                              datetime.datetime(2020, 3, 14, 0, 0),
                              datetime.datetime(2020, 3, 15, 0, 0),
                              datetime.datetime(2020, 3, 16, 0, 0),
                              datetime.datetime(2020, 3, 17, 0, 0),
                              datetime.datetime(2020, 3, 18, 0, 0),
                              datetime.datetime(2020, 3, 19, 0, 0),
                              datetime.datetime(2020, 3, 20, 0, 0),
                              datetime.datetime(2020, 3, 21, 0, 0),
                              datetime.datetime(2020, 3, 22, 0, 0),
                              datetime.datetime(2020, 3, 23, 0, 0),
                              datetime.datetime(2020, 3, 24, 0, 0),
                              datetime.datetime(2020, 3, 25, 0, 0),
                              datetime.datetime(2020, 3, 26, 0, 0),
                              datetime.datetime(2020, 3, 27, 0, 0),
                              datetime.datetime(2020, 3, 28, 0, 0),
                              datetime.datetime(2020, 3, 29, 0, 0),
                              datetime.datetime(2020, 3, 30, 0, 0),
                              datetime.datetime(2020, 3, 31, 0, 0),
                              datetime.datetime(2020, 4, 1, 0, 0)], dtype=object),
                  'y': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                              0., 0., 0., 0.])},
                 {'line': {'color': 'rgb(255,255,255)'},
                  'showlegend': False,
                  'type': 'scatter',
                  'uid': '3681ef64-c225-496d-b9e4-3e78fc496d07',
                  'x': array([datetime.datetime(2020, 3, 11, 0, 0),
                              datetime.datetime(2020, 3, 12, 0, 0),
                              datetime.datetime(2020, 3, 13, 0, 0),
                              datetime.datetime(2020, 3, 14, 0, 0),
                              datetime.datetime(2020, 3, 15, 0, 0),
                              datetime.datetime(2020, 3, 16, 0, 0),
                              datetime.datetime(2020, 3, 17, 0, 0),
                              datetime.datetime(2020, 3, 18, 0, 0),
                              datetime.datetime(2020, 3, 19, 0, 0),
                              datetime.datetime(2020, 3, 20, 0, 0),
                              datetime.datetime(2020, 3, 21, 0, 0),
                              datetime.datetime(2020, 3, 22, 0, 0),
                              datetime.datetime(2020, 3, 23, 0, 0),
                              datetime.datetime(2020, 3, 24, 0, 0),
                              datetime.datetime(2020, 3, 25, 0, 0),
                              datetime.datetime(2020, 3, 26, 0, 0),
                              datetime.datetime(2020, 3, 27, 0, 0),
                              datetime.datetime(2020, 3, 28, 0, 0),
                              datetime.datetime(2020, 3, 29, 0, 0),
                              datetime.datetime(2020, 3, 30, 0, 0),
                              datetime.datetime(2020, 3, 31, 0, 0),
                              datetime.datetime(2020, 4, 1, 0, 0)], dtype=object),
                  'y': array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                              0., 0., 0., 0.])}],
        'layout': {'font': {'size': 18}, 'plot_bgcolor': '#fff', 'template': '...', 'yaxis': {'title': {'text': 'N'}}}
    })))






|

.. code-block:: default



    import xarray as xr
    import plotly
    from epivislab.simhandler import EpiSummary

    sims = xr.open_zarr('../../../tests/data/test_sim_2.zarr/')

    test = EpiSummary(
        simulation=sims,
        state_coord=['compt'],
        within_sim_coord=['age', 'risk', 'vertex'],
        time_coord=['step'],
        between_sim_coord=['index'],
        measured_coord=['compt_model__state']
    )

    fig = test.interval_plot(
        groupers=['age', 'risk', 'step', 'vertex', 'compt'],
        aggcol='compt_model__state',
        upper=0.9,
        lower=0.05)

    plotly.io.show(fig)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  5.422 seconds)


.. _sphx_glr_download_auto_examples_plot_prediction_interval.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_prediction_interval.py <plot_prediction_interval.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_prediction_interval.ipynb <plot_prediction_interval.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
